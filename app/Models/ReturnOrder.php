<?php

namespace App\Models;

use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use \Dingo\Api\Exception\UpdateResourceFailedException;

class ReturnOrder extends Model
{
    const RETURN_STATUS_NEW          = 10;
    const RETURN_STATUS_CS_ONE_AUDIT = 20;
    const RETURN_STATUS_AS_ONE_AUDIT = 30;
    const RETURN_STATUS_CS_TWO_AUDIT = 40;
    const RETURN_STATUS_WH_AUDIT     = 50;
    const RETURN_STATUS_AS_TWO_AUDIT = 60;
    const RETURN_STATUS_STOCK_SUBMIT = 70;
    const RETURN_STATUS_STOCK_SYNC   = 80;

    //订单状态
    public static $returnStatusMap = [
        self::RETURN_STATUS_NEW          => '未处理',
        self::RETURN_STATUS_CS_ONE_AUDIT => '客服一审',
        self::RETURN_STATUS_AS_ONE_AUDIT => '售后一审',
        self::RETURN_STATUS_CS_TWO_AUDIT => '客服二审',
        self::RETURN_STATUS_WH_AUDIT     => '仓储验收',
        self::RETURN_STATUS_AS_TWO_AUDIT => '售后二审',
        self::RETURN_STATUS_STOCK_SUBMIT => '库存提交',
        self::RETURN_STATUS_STOCK_SYNC   => '同步库存',
    ];

    protected $table = 'return_orders';

    protected $fillable = [
        'orders_id', 'shops_id', 'member_nick', 'customer_name',
        'customer_phone', 'deposit', 'return_reasons_id', 'customer_address',
        'is_scour', 'payee', 'refund_account', 'refund_payment_methods_id', 'refund_amount',
        'logistics_id', 'freight_types', 'freight', 'logistics_sn', 'take_delivery_goods_address',
        'logistics_remark', 'follow_up', 'distributions_id', 'pulling_cost', 'status',
        'expected_arrival_time', 'person_liable_id', 'liable_fee', 'as_remark'
    ];

    //设置类型
    protected $casts = [
        'is_scour' => 'boolean',
        'status' => 'boolean',
        'orders_id' => 'integer',
        'shops_id' => 'integer',
        'customer_service_id' => 'integer',
        'refund_reasons_id' => 'integer',
        'refund_payment_methods_id' => 'integer',
        'logistics_id' => 'integer',
        'freight_types' => 'integer',
        'distributions_id' => 'integer',
    ];

    protected $dates = [
        'expected_arrival_time'
    ];

    //观察者
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        // 监听模型创建事件，在写入数据库之前触发
        static::creating(function($model) {
            // 如果模型的 return_sn 字段为空
            if (!$model->return_sn) {
                // 调用 findAvailableNo 生成订单流水号
                $model->return_sn = static::findAvailableNo('RT', 'return_sn');
                // 如果生成失败，则终止创建订单
                if (!$model->return_sn) {
                    return false;
                }
            }

            // 如果模型的 return_order_status 字段为空
            if (!$model->return_order_status) {
                $model->return_order_status = self::RETURN_STATUS_NEW;
                // 如果生成失败，则终止创建订单
                if (!$model->return_order_status) {
                    return false;
                }
            }

            // 如果模型的 customer_service_id 字段为空
            if (!$model->customer_service_id) {
                $model->customer_service_id = Auth::guard('api')->id();
                // 如果生成失败，则终止创建订单
                if (!$model->customer_service_id) {
                    return false;
                }
            }

        });
    }

    /**
     * 客服退货未一审
     *
     * @return bool
     */
    public function isCsUnOneAudit()
    {
        return $this->getOriginal('return_order_status') != self::RETURN_STATUS_CS_ONE_AUDIT;
    }

    /**
     * 客服一审
     * @return bool
     */
    public function csOneAudit()
    {
        $this->return_order_status = self::RETURN_STATUS_CS_ONE_AUDIT;
        $this->save();
    }

    /**
     * 客服一审退审
     * @return bool
     */
    public function csUnOneAudit()
    {
        $this->return_order_status = self::RETURN_STATUS_NEW;
        $this->save();
    }

    /**
     * 售后未一审
     *
     * @return bool
     */
    public function isAsUnOneAudit()
    {
        return $this->getOriginal('return_order_status') != self::RETURN_STATUS_AS_ONE_AUDIT;
    }

    /**
     * 售后一审
     * @return bool
     */
    public function asOneAudit()
    {
        $this->return_order_status = self::RETURN_STATUS_AS_ONE_AUDIT;
        $this->save();
    }

    /**
     * 售后一审退审
     * @return bool
     */
    public function asUnOneAudit()
    {
        $this->return_order_status = self::RETURN_STATUS_CS_ONE_AUDIT;
        $this->save();
    }

    /**
     * 客服退货未二审
     *
     * @return bool
     */
    public function isCsUnTwoAudit()
    {
        return $this->getOriginal('return_order_status') != self::RETURN_STATUS_CS_TWO_AUDIT;
    }

    /**
     * 客服二审
     * @return bool
     */
    public function csTwoAudit()
    {
        $this->return_order_status = self::RETURN_STATUS_CS_TWO_AUDIT;
        $this->save();
    }

    /**
     * 售后二审退审
     * @return bool
     */
    public function csUnTwoAudit()
    {
        $this->return_order_status = self::RETURN_STATUS_AS_ONE_AUDIT;
        $this->save();
    }

    /**
     * 仓储未审核
     * @return bool
     */
    public function isUnWhAudit()
    {
        return $this->getOriginal('return_order_status') != self::RETURN_STATUS_WH_AUDIT;
    }

    /**
     * 仓储审核
     * @return bool
     */
    public function whAudit()
    {
        $this->return_order_status = self::RETURN_STATUS_WH_AUDIT;
        $this->save();
    }

    /**
     * 仓储审核退审
     * @return bool
     */
    public function whUnAudit()
    {
        $this->return_order_status = self::RETURN_STATUS_CS_TWO_AUDIT;
        $this->save();
    }

    /**
     * 售后未二审
     * @return bool
     */
    public function isAsUnTwoAudit()
    {
        return $this->getOriginal('return_order_status') != self::RETURN_STATUS_AS_TWO_AUDIT;
    }

    /**
     * 售后二审
     * @return bool
     */
    public function asTwoAudit()
    {
        $this->return_order_status = self::RETURN_STATUS_AS_TWO_AUDIT;
        $this->save();
    }

    /**
     * 售后二审退审
     * @return bool
     */
    public function asUnTwoAudit()
    {
        $this->return_order_status = self::RETURN_STATUS_WH_AUDIT;
        $this->save();
    }

    /**
     * 售后未二审
     * @return bool
     */
    public function isUnStockSubmit()
    {
        return $this->getOriginal('return_order_status') != self::RETURN_STATUS_STOCK_SUBMIT;
    }

    /**
     * 库存提交
     *
     * @return bool
     */
    public function stockSubmit()
    {
        $this->return_order_status = self::RETURN_STATUS_STOCK_SUBMIT;
        $this->save();
    }

    /**
     * 创建其他入库单
     *
     * @return bool
     */
    public function createOtherStockIn()
    {
        DB::transaction(function (){
            $this->returnOrderItem->map(function($returnOrderItem){
                //创建其他入库订单
                $stockIn = StockIn::create([
                    'external_sn' => $this->return_sn,
                    'warehouse_id' => $returnOrderItem->warehouse_id,
                    'suppliers_id' => $returnOrderItem->suppliers_id,
                    'status' => true,
                ]);

                $productComponents = $returnOrderItem->orderItem->combination->productComponents;

                $productComponents->map(function($productComponent) use ($stockIn, $returnOrderItem){
                    $stockIn->stockInDetails()->create([
                        'product_components_id' => $productComponent->id,
                        'total_fee' => $returnOrderItem->repair_price,
                        'stock_in_quantity' => 1,
                    ]);
                });
            });
        });

        return true;
    }

    /**
     * 库存同步
     * @return bool
     */
    public function stockSync()
    {
        $this->return_order_status = self::RETURN_STATUS_STOCK_SYNC;
        $this->save();
    }

    /**
     * 其他入库订单未入库
     *
     * @return bool
     */
    public function checkOtherStockNotIn()
    {
        $stockIn = \App\Models\StockIn::where('external_sn', $this->return_sn);

        if ($stockIn->count() !== 1)
            throw new UpdateResourceFailedException('不能关联多条订单');

        return !$stockIn->first()->is_stock_in;
    }

    /**
     * 生成订单流水号
     *
     * @param $prefix       订单流水号前缀
     * @param $index        字段名
     * @return string
     */
    public static function findAvailableNo(String $prefix, String $index) :String
    {
        do {
            // 随机生成订单号
            $no = $prefix . date('YmdHis') . str_pad(mt_rand(1, 99999), 5, 0, STR_PAD_LEFT);
        } while (static::query()->where($index, $no)->exists());

        return $no;
    }

    public function getReturnOrderStatusAttribute($value)
    {
        return self::$returnStatusMap[$value] ?? $value;
    }

    public function order()
    {
        return $this->belongsTo(Order::class, 'orders_id');
    }

    public function shop()
    {
        return $this->belongsTo(shop::class, 'shops_id');
    }

    public function customerService()
    {
        return $this->belongsTo(User::class, 'customer_service_id');
    }

    public function returnReason()
    {
        return $this->belongsTo(ReturnReason::class, 'return_reasons_id');
    }

    public function refundPaymentMethod()
    {
        return $this->belongsTo(PaymentMethod::class, 'refund_payment_methods_id');
    }

    public function logistics()
    {
        return $this->belongsTo(Logistics::class, 'logistics_id');
    }

    public function freightType()
    {
        return $this->belongsTo(FreightType::class, 'freight_types_id');
    }

    public function distribution()
    {
        return $this->belongsTo(Distribution::class, 'distributions_id');
    }

    public function returnOrderItem()
    {
        return $this->hasMany(ReturnOrderItem::class, 'return_orders_id');
    }

    public function personliable()
    {
        return $this->belongsTo(User::class, 'person_liable_id');
    }

}
