<?php

namespace App\Models;

use Carbon\Carbon;
use Illuminate\Support\Facades\Auth;

class RefundOrder extends Model
{
    protected $table = 'refund_orders';

    const REFUND_STATUS_NEW = 10;
    const REFUND_STATUS_LOCK = 15;
    const REFUND_STATUS_CS_AUDIT = 30;
    const REFUND_STATUS_AS_LOCK = 35;
    const REFUND_STATUS_AS_AUDIT = 40;
    const REFUND_STATUS_FD_LOCK = 45;
    const REFUND_STATUS_FD_AUDIT = 50;

    //订单来源
    const ORDER_SOURCE_SYSTEM = 'system';
    const ORDER_SOURCE_TAOBAO = 'taobao';

    //订单状态
    public static $refundStatusMap = [
        self::REFUND_STATUS_NEW => '未处理',
        self::REFUND_STATUS_LOCK => '订单锁定',
        self::REFUND_STATUS_CS_AUDIT => '已客审',
        self::REFUND_STATUS_AS_LOCK => '售后锁定',
        self::REFUND_STATUS_AS_AUDIT => '已后审',
        self::REFUND_STATUS_FD_LOCK => '财务锁定',
        self::REFUND_STATUS_FD_AUDIT => '已财审',
    ];

    protected $fillable = [
        'order_sn', 'payment_methods_id', 'time_out_at', 'shops_id', 'account',
        'refund_payment_methods_id', 'bank', 'address', 'refund_amount', 'transaction_sn',
        'refund_reasons_id', 'buyer_nick', 'buyer_name', 'payment', 'person_liable',
        'liable_fee', 'undertaker', 'business_remark', 'as_remark', 'f_remark',
        'refund_description', 'taobao_refund_status', 'status',
    ];

    //设置类型
    protected $casts = [
        'status' => 'boolean',
        'locker_id' => 'integer',
        'shops_id' => 'integer',
        'payment_methods_id' => 'integer',
        'refund_payment_methods_id' => 'integer',
        'refund_reasons_id' => 'integer',
        'business_personnel_id' => 'integer',
        'after_sales_id' => 'integer',
        'financial_id' => 'integer',
    ];

    protected $dates = [
        'f_audit_at', 'as_audit_at', 'cs_audit_at'
    ];

    //观察者
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        // 监听模型创建事件，在写入数据库之前触发
        static::creating(function($model) {
            // 如果模型的 refund_sn 字段为空
            if (!$model->refund_sn) {
                // 调用 findAvailableNo 生成订单流水号
                $model->refund_sn = static::findAvailableNo('RA', 'refund_sn');
                // 如果生成失败，则终止创建订单
                if (!$model->refund_sn) {
                    return false;
                }
            }

            // 如果模型的 order_source 字段为空
            if (!$model->order_source) {
                $model->order_source = self::ORDER_SOURCE_SYSTEM;
                // 如果生成失败，则终止创建订单
                if (!$model->order_source) {
                    return false;
                }
            }

            // 如果模型的 refund_order_status 字段为空
            if (!$model->refund_order_status) {
                $model->refund_order_status = self::REFUND_STATUS_NEW;
                // 如果生成失败，则终止创建订单
                if (!$model->refund_order_status) {
                    return false;
                }
            }

            // 如果模型的 creator_id 字段为空
            if (!$model->creator_id) {
                $model->creator_id = Auth::guard('api')->id();
                // 如果生成失败，则终止创建订单
                if (!$model->creator_id) {
                    return false;
                }
            }

        });
    }

    /**
     * 订单未锁定
     * @return bool
     */
    public function unlock()
    {
        return $this->getOriginal('refund_order_status') != self::REFUND_STATUS_LOCK;
    }

    /**
     * 订单锁定或释放
     * @return bool
     */
    public function lockOrUnlock()
    {
        if($this->unlock()){
            $this->business_personnel_id = Auth::guard('api')->id();
            $this->locker_id = Auth::guard('api')->id();
            $this->refund_order_status = self::REFUND_STATUS_LOCK;
        }else{
            $this->business_personnel_id = 0;
            $this->locker_id = 0;
            $this->refund_order_status = self::REFUND_STATUS_NEW;
        }

        $this->save();
    }

    /**
     * 客审
     * @return bool
     */
    public function audit()
    {
        $this->locker_id = 0;
        $this->refund_order_status = self::REFUND_STATUS_CS_AUDIT;
        $this->cs_audit_at = Carbon::now();
        $this->save();
    }

    /**
     * 退审
     * @return bool
     */
    public function unAudit()
    {
        $this->business_personnel_id = 0;
        $this->refund_order_status = self::REFUND_STATUS_NEW;
        $this->cs_audit_at = null;
        $this->save();
    }

    /**
     * 售后未锁定
     * @return bool
     */
    public function asUnlock()
    {
        return $this->getOriginal('refund_order_status') != self::REFUND_STATUS_AS_LOCK;
    }

    /**
     * 售后订单锁定或释放
     * @return bool
     */
    public function asLockOrUnlock()
    {
        if($this->asUnlock()){
            $this->locker_id = Auth::guard('api')->id();
            $this->refund_order_status = self::REFUND_STATUS_AS_LOCK;
        }else{
            $this->locker_id = 0;
            $this->refund_order_status = self::REFUND_STATUS_CS_AUDIT;
        }

        $this->save();
    }

    /**
     * 售后审核
     * @return bool
     */
    public function asAudit()
    {
        $this->locker_id = 0;
        $this->after_sales_id = Auth::guard('api')->id();
        $this->refund_order_status = self::REFUND_STATUS_AS_AUDIT;
        $this->as_audit_at = Carbon::now();
        $this->save();
    }

    /**
     * 售后退审
     * @return bool
     */
    public function asUnAudit()
    {
        $this->after_sales_id = 0;
        $this->refund_order_status = self::REFUND_STATUS_CS_AUDIT;
        $this->as_audit_at = null;
        $this->save();
    }


    /**
     * 财务未锁定
     * @return bool
     */
    public function fdUnlock()
    {
        return $this->getOriginal('refund_order_status') != self::REFUND_STATUS_FD_LOCK;
    }

    /**
     * 财务锁定或释放
     * @return bool
     */
    public function fdLockOrUnlock()
    {
        if($this->fdUnlock()){
            $this->locker_id = Auth::guard('api')->id();
            $this->refund_order_status = self::REFUND_STATUS_FD_LOCK;
        }else{
            $this->locker_id = 0;
            $this->refund_order_status = self::REFUND_STATUS_AS_AUDIT;
        }

        $this->save();
    }

    /**
     * 财务审核
     * @return bool
     */
    public function fdAudit()
    {
        $this->financial_id = 0;
        $this->after_sales_id = Auth::guard('api')->id();
        $this->refund_order_status = self::REFUND_STATUS_FD_AUDIT;
        $this->f_audit_at = Carbon::now();
        $this->save();
    }

    /**
     * 财务退审
     * @return bool
     */
    public function fdUnAudit()
    {
        $this->financial_id = 0;
        $this->refund_order_status = self::REFUND_STATUS_AS_AUDIT;
        $this->f_audit_at = null;
        $this->save();
    }

    /**
     * 生成订单流水号
     *
     * @param $prefix       订单流水号前缀
     * @param $index        字段名
     * @return string
     */
    public static function findAvailableNo(String $prefix, String $index) :String
    {
        do {
            // 随机生成订单号
            $no = $prefix . date('YmdHis') . str_pad(mt_rand(1, 99999), 5, 0, STR_PAD_LEFT);
        } while (static::query()->where($index, $no)->exists());

        return $no;
    }


    public function getRefundOrderStatusAttribute($value)
    {
        return self::$refundStatusMap[$value] ?? $value;
    }


    public function paymentMethod()
    {
        return $this->belongsTo(PaymentMethod::class, 'payment_methods_id');
    }

    public function shop()
    {
        return $this->belongsTo(Shop::class, 'shops_id');
    }

    public function refundPaymentMethod()
    {
        return $this->belongsTo(PaymentMethod::class, 'refund_payment_methods_id');
    }

    public function refundReason()
    {
        return $this->belongsTo(RefundReason::class, 'refund_reasons_id');
    }

    public function creator()
    {
        return $this->belongsTo(User::class, 'creator_id');
    }

    public function businessPersonnel()
    {
        return $this->belongsTo(User::class, 'business_personnel_id');
    }

    public function locker()
    {
        return $this->belongsTo(User::class, 'locker_id');
    }

    public function afterSale()
    {
        return $this->belongsTo(User::class, 'after_sales_id');
    }

    public function financial()
    {
        return $this->belongsTo(User::class, 'financial_id');
    }

}
