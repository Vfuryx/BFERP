<?php

namespace App\Models;

use Carbon\Carbon;

class Purchase extends Model
{
    const PURCHASE_STATUS_NEW = 'new';
    const PURCHASE_STATUS_SECTION = 'section';
    const PURCHASE_STATUS_FINISH = 'finish';

    public static $purchaseStatusMap = [
        self::PURCHASE_STATUS_NEW => '新建',
        self::PURCHASE_STATUS_SECTION => '部分完成',
        self::PURCHASE_STATUS_FINISH => '完成'
    ];

    public static $purchaseStatusCodeMap = [
        self::PURCHASE_STATUS_NEW => -1,
        self::PURCHASE_STATUS_SECTION => 0,
        self::PURCHASE_STATUS_FINISH => 1
    ];

    protected $table = "purchases";

    protected $fillable = [
        'purchase_order_no', 'receiver', 'receiver_address',
        'remark', 'order_no', 'user_id', 'promise_ship_time',
        'business_personnel', 'source', 'client_name', 'buyer_nick',
        'status',
    ];

    protected $dates = [
        'print_at',
        'promise_ship_time'
    ];

    //设置类型
    protected $casts = [
        'is_submit' => 'boolean',
        'is_print' => 'boolean',
        'is_audit' => 'boolean',
        'is_change' => 'boolean',
        'status' => 'boolean'
    ];

    //观察者
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        // 监听模型创建事件，在写入数据库之前触发
        static::creating(function($model) {
            // 如果模型的 no 字段为空
            if (!$model->purchase_order_no) {
                // 调用 findAvailableNo 生成订单流水号
                $model->purchase_order_no = static::findAvailableNo();
                // 如果生成失败，则终止创建订单
                if (!$model->purchase_order_no) {
                    return false;
                }
            }

            // 如果模型的 user_id 字段为空
            if (!$model->user_id) {

                $model->user_id = 1;
                // 如果生成失败，则终止创建订单
                if (!$model->user_id) {
                    return false;
                }
            }

        });

        //字段有修改才会触发
        static::updating(function($model) {
            // 如果模型 is_change 为 0
            if (!$model->is_change) {
                $model->is_change = 1;
            }
        });
    }

    //设置状态
    public function setPurchaseStatus($status)
    {
        $this->purchase_status = $status;
        $this->save();

    }

    /**
     * 提交
     */
    public function input()
    {
        $this->is_submit = 1;
        $this->save();
    }

    /**
     * 审核
     */
    public function audit()
    {
        $this->is_audit = 1;
        $this->save();
    }

    /**
     * 打印
     */
    public function print()
    {
        $this->print_at = Carbon::now();
        $this->is_print = 1;
        $this->save();
    }

    /**
     * 检查并修改采购订单状态
     */
    public function checkAndChangePurchaseStatus()
    {
        //查找采购清单层级
        $purchase = $this->load('purchaseLists.purchaseDetails');

        $purchaseLists = $purchase->purchaseLists;

        $sum = $purchaseLists->map(function($item) {
            $sum = $item->purchaseDetails->map(function($item) {
                return self::$purchaseStatusCodeMap[$item->getOriginal('purchase_item_status')];
            })->sum();
            return $this->countPurchaseStatus($sum, $item->purchaseDetails->count());
        })->sum();

        $this->purchase_status = array_search($this->countPurchaseStatus($sum, $purchaseLists->count()), self::$purchaseStatusCodeMap);

        $this->save();

        return true;
    }

    /**
     * 计算出采购单状态
     * @param $sum          和
     * @param $itemCont     子订单的个数
     */
    private function countPurchaseStatus($sum, $itemCont)
    {
        switch ($sum + $itemCont) {
            case 0:
                return self::$purchaseStatusCodeMap[self::PURCHASE_STATUS_NEW];
                break;
            case  $sum * 2:
                return self::$purchaseStatusCodeMap[self::PURCHASE_STATUS_FINISH];
                break;
            default:
                return self::$purchaseStatusCodeMap[self::PURCHASE_STATUS_SECTION];
                break;
        }
    }


    public static function findAvailableNo()
    {
        // 订单流水号前缀
        //PR:Purchase Request Form 采购申请单,公司内部使用;
        //PO:Purchase Order Form 采购订单,公司对外使用。
        $prefix = 'PO';

        for ($i = 0; $i < 10; $i++) {
            // 随机生成 6 位的数字
            $no = $prefix . date('YmdHis') . str_pad(mt_rand(1, 99999), 5, 0, STR_PAD_LEFT);
            // 判断是否已经存在
            if (!static::query()->where('purchase_order_no', $no)->exists()) {
                return $no;
            }
        }

        return false;
    }


    public function getPurchaseStatusAttribute($value)
    {
        return self::$purchaseStatusMap[$value ? $value : self::PURCHASE_STATUS_NEW];
    }

    public function user()
    {
        return $this->belongsTo(User::class, 'user_id');
    }

    public function purchaseLists()
    {
        return $this->hasMany(PurchaseList::class, 'purchases_id');
    }

    public function cancelPurchases()
    {
        return $this->hasMany(CancelPurchase::class, 'purchases_id');
    }
}
